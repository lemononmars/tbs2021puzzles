!function(){"use strict";const e=1638515778546,n=`cache${e}`,t=["/client/client.9dca66fd.js","/client/inject_styles.5607aec6.js","/client/index.d2b5a93f.js","/client/Button.d9240fcb.js","/client/CommonLabel.f1695f98.js","/client/round1puzzles.10270b38.js","/client/Actions.c3b4b4a2.js","/client/ClueTable.6ae2297d.js","/client/save.4f7aa5ee.js","/client/Actions.7767567e.js","/client/checker.93a8da79.js","/client/round2puzzles.aed99a01.js","/client/leaderboard.245e7c30.js","/client/index.c1a38058.js","/client/stats.50cb97a4.js","/client/oldindex.d4604fd0.js","/client/index.6b428c3b.js","/client/index.9ffdd9ec.js","/client/puzzles.2da787ba.js","/client/RatingButton.d3d8361c.js","/client/about.bd0cc1d8.js","/client/wrapup.52a6b8f2.js","/client/index.c1da47f3.js","/client/puzzle_id_.58a707e4.js","/client/PRIZE.8b54977b.js","/client/final.051da17e.js"].concat(["/service-worker-index.html","/correct.mp3","/enter/final.png","/enter/puzzle1.png","/enter/puzzle2.png","/enter/puzzle3.png","/enter/puzzle4.png","/extra even prime.png","/extra restless.png","/extra spam.png","/favicon.png","/global.css","/incorrect.mp3","/logo-192.png","/logo-512.png","/manifest.json","/round1/puzzle3hint.png","/round1/puzzle5hint.png","/round1/puzzleicon1.png","/round1/puzzleicon2.png","/round1/puzzleicon3.png","/round1/puzzleicon4.png","/round1/puzzleicon5.png","/round1/puzzleicon6.png","/solution round 1.png"]),c=new Set(t);self.addEventListener("install",(e=>{e.waitUntil(caches.open(n).then((e=>e.addAll(t))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const t of e)t!==n&&await caches.delete(t);self.clients.claim()})))})),self.addEventListener("fetch",(n=>{if("GET"!==n.request.method||n.request.headers.has("range"))return;const t=new URL(n.request.url),s=t.protocol.startsWith("http"),i=t.hostname===self.location.hostname&&t.port!==self.location.port,a=t.host===self.location.host&&c.has(t.pathname),l="only-if-cached"===n.request.cache&&!a;!s||i||l||n.respondWith((async()=>a&&await caches.match(n.request)||async function(n){const t=await caches.open(`offline${e}`);try{const e=await fetch(n);return t.put(n,e.clone()),e}catch(e){const c=await t.match(n);if(c)return c;throw e}}(n.request))())}))}();
