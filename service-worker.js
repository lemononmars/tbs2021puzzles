!function(){"use strict";const e=1638512004412,n=`cache${e}`,t=["/client/client.2bf54e2e.js","/client/inject_styles.5607aec6.js","/client/index.0c47aac0.js","/client/Button.59dca780.js","/client/CommonLabel.82f9bf63.js","/client/round1puzzles.068a19e2.js","/client/Actions.957e63e1.js","/client/ClueTable.263c8fd7.js","/client/save.50c70159.js","/client/Actions.cb0b74d3.js","/client/_checker.0103b2c3.js","/client/round2puzzles.1f3740fc.js","/client/leaderboard.12fbe39c.js","/client/index.a2170c6d.js","/client/_stats.50bd434e.js","/client/oldindex.3773fa24.js","/client/index.6b428c3b.js","/client/index.12f8cdb9.js","/client/puzzles.b37d9d7e.js","/client/RatingButton.c13f7dd0.js","/client/about.9654b51e.js","/client/wrapup.7b48e97f.js","/client/index.af20fe7e.js","/client/puzzle_id_.5c0e6683.js","/client/PRIZE.8ec3128a.js","/client/final.c315f7ae.js"].concat(["/service-worker-index.html","/correct.mp3","/enter/final.png","/enter/puzzle1.png","/enter/puzzle2.png","/enter/puzzle3.png","/enter/puzzle4.png","/extra even prime.png","/extra restless.png","/extra spam.png","/favicon.png","/global.css","/incorrect.mp3","/logo-192.png","/logo-512.png","/manifest.json","/round1/puzzle3hint.png","/round1/puzzle5hint.png","/round1/puzzleicon1.png","/round1/puzzleicon2.png","/round1/puzzleicon3.png","/round1/puzzleicon4.png","/round1/puzzleicon5.png","/round1/puzzleicon6.png","/solution round 1.png"]),c=new Set(t);self.addEventListener("install",(e=>{e.waitUntil(caches.open(n).then((e=>e.addAll(t))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const t of e)t!==n&&await caches.delete(t);self.clients.claim()})))})),self.addEventListener("fetch",(n=>{if("GET"!==n.request.method||n.request.headers.has("range"))return;const t=new URL(n.request.url),s=t.protocol.startsWith("http"),i=t.hostname===self.location.hostname&&t.port!==self.location.port,l=t.host===self.location.host&&c.has(t.pathname),a="only-if-cached"===n.request.cache&&!l;!s||i||a||n.respondWith((async()=>l&&await caches.match(n.request)||async function(n){const t=await caches.open(`offline${e}`);try{const e=await fetch(n);return t.put(n,e.clone()),e}catch(e){const c=await t.match(n);if(c)return c;throw e}}(n.request))())}))}();
