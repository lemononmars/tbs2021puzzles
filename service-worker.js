!function(){"use strict";const e=1638514711332,n=`cache${e}`,t=["/client/client.80fb3202.js","/client/inject_styles.5607aec6.js","/client/index.5cdda652.js","/client/Button.42bf99f9.js","/client/CommonLabel.deaefd36.js","/client/round1puzzles.0f7a13d2.js","/client/Actions.7b0252ca.js","/client/ClueTable.9dff6768.js","/client/save.34b54772.js","/client/Actions.75324bf1.js","/client/_checker.0103b2c3.js","/client/round2puzzles.b583de8e.js","/client/leaderboard.c2c8ba4c.js","/client/index.54f9b915.js","/client/_stats.50bd434e.js","/client/oldindex.bc38fc5a.js","/client/index.6b428c3b.js","/client/index.8a54c6f4.js","/client/puzzles.3ee21c36.js","/client/RatingButton.15c5ace2.js","/client/about.7d28fba2.js","/client/wrapup.643efd76.js","/client/index.7881ddcb.js","/client/puzzle_id_.0f2962a9.js","/client/PRIZE.47f9d40f.js","/client/final.d8522960.js"].concat(["/service-worker-index.html","/correct.mp3","/enter/final.png","/enter/puzzle1.png","/enter/puzzle2.png","/enter/puzzle3.png","/enter/puzzle4.png","/extra even prime.png","/extra restless.png","/extra spam.png","/favicon.png","/global.css","/incorrect.mp3","/logo-192.png","/logo-512.png","/manifest.json","/round1/puzzle3hint.png","/round1/puzzle5hint.png","/round1/puzzleicon1.png","/round1/puzzleicon2.png","/round1/puzzleicon3.png","/round1/puzzleicon4.png","/round1/puzzleicon5.png","/round1/puzzleicon6.png","/solution round 1.png"]),c=new Set(t);self.addEventListener("install",(e=>{e.waitUntil(caches.open(n).then((e=>e.addAll(t))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const t of e)t!==n&&await caches.delete(t);self.clients.claim()})))})),self.addEventListener("fetch",(n=>{if("GET"!==n.request.method||n.request.headers.has("range"))return;const t=new URL(n.request.url),s=t.protocol.startsWith("http"),i=t.hostname===self.location.hostname&&t.port!==self.location.port,l=t.host===self.location.host&&c.has(t.pathname),a="only-if-cached"===n.request.cache&&!l;!s||i||a||n.respondWith((async()=>l&&await caches.match(n.request)||async function(n){const t=await caches.open(`offline${e}`);try{const e=await fetch(n);return t.put(n,e.clone()),e}catch(e){const c=await t.match(n);if(c)return c;throw e}}(n.request))())}))}();
