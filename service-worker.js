!function(){"use strict";const e=1638519692328,n=`cache${e}`,t=["/client/client.8adc7ed3.js","/client/inject_styles.5607aec6.js","/client/index.da0f3add.js","/client/Button.a46c902a.js","/client/CommonLabel.c12a9fa6.js","/client/round1puzzles.8620da9b.js","/client/Actions.a9b958c7.js","/client/ClueTable.7209e1bd.js","/client/save.87425365.js","/client/Actions.ee1f0151.js","/client/checker.93a8da79.js","/client/round2puzzles.768a512d.js","/client/leaderboard.0420108f.js","/client/index.0f0ab151.js","/client/stats.50cb97a4.js","/client/oldindex.389b3294.js","/client/index.6b428c3b.js","/client/index.463f5752.js","/client/puzzles.10a86b5f.js","/client/RatingButton.ca245685.js","/client/about.d7dc54fe.js","/client/wrapup.1e440dc8.js","/client/index.e72658e3.js","/client/puzzle_id_.f3dd2a18.js","/client/PRIZE.cd383cf3.js","/client/final.fe4b018e.js"].concat(["/service-worker-index.html","/correct.mp3","/enter/final.png","/enter/puzzle1.png","/enter/puzzle2.png","/enter/puzzle3.png","/enter/puzzle4.png","/extra even prime.png","/extra restless.png","/extra spam.png","/favicon.png","/global.css","/incorrect.mp3","/logo-192.png","/logo-512.png","/manifest.json","/round1/puzzle3hint.png","/round1/puzzle3missingclue.png","/round1/puzzle5hint.png","/round1/puzzleicon1.png","/round1/puzzleicon2.png","/round1/puzzleicon3.png","/round1/puzzleicon4.png","/round1/puzzleicon5.png","/round1/puzzleicon6.png","/round2overview.png","/solution round 1.png"]),c=new Set(t);self.addEventListener("install",(e=>{e.waitUntil(caches.open(n).then((e=>e.addAll(t))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const t of e)t!==n&&await caches.delete(t);self.clients.claim()})))})),self.addEventListener("fetch",(n=>{if("GET"!==n.request.method||n.request.headers.has("range"))return;const t=new URL(n.request.url),s=t.protocol.startsWith("http"),i=t.hostname===self.location.hostname&&t.port!==self.location.port,l=t.host===self.location.host&&c.has(t.pathname),a="only-if-cached"===n.request.cache&&!l;!s||i||a||n.respondWith((async()=>l&&await caches.match(n.request)||async function(n){const t=await caches.open(`offline${e}`);try{const e=await fetch(n);return t.put(n,e.clone()),e}catch(e){const c=await t.match(n);if(c)return c;throw e}}(n.request))())}))}();
