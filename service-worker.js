!function(){"use strict";const e=1638516042469,n=`cache${e}`,t=["/client/client.10f05efd.js","/client/inject_styles.5607aec6.js","/client/index.53b07b28.js","/client/Button.2b2c6477.js","/client/CommonLabel.7466d40b.js","/client/round1puzzles.23fbad69.js","/client/Actions.16cff531.js","/client/ClueTable.a0ec8f36.js","/client/save.0fc56bb9.js","/client/Actions.e65b823f.js","/client/checker.93a8da79.js","/client/round2puzzles.d818a97b.js","/client/leaderboard.25fd5c7b.js","/client/index.14014b3d.js","/client/stats.50cb97a4.js","/client/oldindex.d8fe9415.js","/client/index.6b428c3b.js","/client/index.106c829e.js","/client/puzzles.1705b4c4.js","/client/RatingButton.c25db1d1.js","/client/about.b877df46.js","/client/wrapup.830bca7e.js","/client/index.38ddc7a8.js","/client/puzzle_id_.c1b90917.js","/client/PRIZE.0b895bac.js","/client/final.b04e4245.js"].concat(["/service-worker-index.html","/correct.mp3","/enter/final.png","/enter/puzzle1.png","/enter/puzzle2.png","/enter/puzzle3.png","/enter/puzzle4.png","/extra even prime.png","/extra restless.png","/extra spam.png","/favicon.png","/global.css","/incorrect.mp3","/logo-192.png","/logo-512.png","/manifest.json","/round1/puzzle3hint.png","/round1/puzzle5hint.png","/round1/puzzleicon1.png","/round1/puzzleicon2.png","/round1/puzzleicon3.png","/round1/puzzleicon4.png","/round1/puzzleicon5.png","/round1/puzzleicon6.png","/solution round 1.png"]),c=new Set(t);self.addEventListener("install",(e=>{e.waitUntil(caches.open(n).then((e=>e.addAll(t))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const t of e)t!==n&&await caches.delete(t);self.clients.claim()})))})),self.addEventListener("fetch",(n=>{if("GET"!==n.request.method||n.request.headers.has("range"))return;const t=new URL(n.request.url),s=t.protocol.startsWith("http"),i=t.hostname===self.location.hostname&&t.port!==self.location.port,l=t.host===self.location.host&&c.has(t.pathname),a="only-if-cached"===n.request.cache&&!l;!s||i||a||n.respondWith((async()=>l&&await caches.match(n.request)||async function(n){const t=await caches.open(`offline${e}`);try{const e=await fetch(n);return t.put(n,e.clone()),e}catch(e){const c=await t.match(n);if(c)return c;throw e}}(n.request))())}))}();
